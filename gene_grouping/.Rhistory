hepatocytes
endothelial
fibroblast
mast_cells
setwd("../../../pipelines/26_gene_grouping/")
seurat.addr = "../../data/liver_F21F22F23_reference_annotation_10X.RDS"
print("loading data ... ")
seurat.obj = readRDS(seurat.addr)
print("Data loaded.")
colnames(seurat.obj@meta.data)
"nUMI" %in% colnames(seurat.obj@meta.data)
clustering.res = 7
seurat.obj <- FindClusters(object = seurat.obj, reduction.type = "pca",
dims.use = 1:20, resolution = clustering.res, save.SNN = T, algorithm=1)
seurat.obj@meta.data$LouvainClustering = as.vector(seurat.obj@ident)
# check if LouvainClustering is present
if ("LouvainClustering" %in% colnames(seurat.obj@meta.data)){
}else{
print("Data needs to be clustered first")
}
# check if LouvainClustering is present
if ("LouvainClustering" %in% colnames(seurat.obj@meta.data)){
print("Identifying gene outliers")
}else{
print("Data needs to be clustered first")
}
# check if LouvainClustering is present
if ("LouvainClustering" %in% colnames(seurat.obj@meta.data)){
print("Identifying gene outliers")
seurat.obj = SetAllIdent(object=seurat.obj, id="LouvainClustering")
no.genes = nrow(seurat.obj@data)
start_index = 1
while (start_index < no.genes){
end_index = start_index + 999
end_index = min(end_index, no.genes)
expression.data_ = data.matrix(seurat.obj@data[start_index:end_index, ])
expression.data_ = t(expression.data_)
expression.data_ = as.data.frame(expression.data_)
expression.data_ = cbind(data.frame(CellLabels = as.vector(seurat.obj@ident)), expression.data_)
expression.data_ = aggregate(expression.data_[2:dim(expression.data_)[2]], list(expression.data_$CellLabels), mean)
expression.data_ = cbind(data.frame(CellType = expression.data_$Group.1), expression.data_[, 2:dim(expression.data_)[2]])
rownames(expression.data_) = expression.data_$CellType
expression.data_ = expression.data_[, 2:ncol(expression.data_)]
print(start_index)
if (start_index == 1){
expression.data = expression.data_
}else{
expression.data = cbind(expression.data, expression.data_)
}
start_index = start_index + 1000
}
}else{
print("Data needs to be clustered first")
}
dim(expression.data)
object.size(expression.data) / 1000000
output_folder = "here"
dir.create(output_folder)
write.csv(expression.data, file.path(output_folder, "expression.csv"))
python.addr
python.addr = "python3.6"
command = sprintf("%s hdbscan_outliers.py %s", python.addr, output_folder)
system(command, wait = T)
system(command, wait = T)
dim(expression.data)
file.remove(file.path(output_folder, "expression.csv"))
gene_clustering = read.csv(file.path(output_folder, "clustering.csv"))
dim(gene_clustering)
gene_clustering = read.csv(file.path(output_folder, "clustering.csv"), row.names = 1)
dim(gene_clustering)
View(gene_clustering)
cluster_labels = sort(as.vector(unique(gene_clustering$Cluster)))
cluster_labels
View(gene_clustering[gene_clustering$Cluster == 0])
View(gene_clustering[gene_clustering$Cluster == 0, ])
View(gene_clustering[gene_clustering$Cluster == 1, ])
View(gene_clustering[gene_clustering$Cluster == 2, ])
View(gene_clustering[gene_clustering$Cluster == 3, ])
View(gene_clustering[gene_clustering$Cluster == 4, ])
View(gene_clustering[gene_clustering$Cluster == 5, ])
no_clusters = 100
# check if LouvainClustering is present
if ("LouvainClustering" %in% colnames(seurat.obj@meta.data)){
print("Identifying gene outliers but first need to aggregate gene expression by clusters")
seurat.obj = SetAllIdent(object=seurat.obj, id="LouvainClustering")
no.genes = nrow(seurat.obj@data)
start_index = 1
while (start_index < no.genes){
end_index = start_index + 999
end_index = min(end_index, no.genes)
expression.data_ = data.matrix(seurat.obj@data[start_index:end_index, ])
expression.data_ = t(expression.data_)
expression.data_ = as.data.frame(expression.data_)
expression.data_ = cbind(data.frame(CellLabels = as.vector(seurat.obj@ident)), expression.data_)
expression.data_ = aggregate(expression.data_[2:dim(expression.data_)[2]], list(expression.data_$CellLabels), mean)
expression.data_ = cbind(data.frame(CellType = expression.data_$Group.1), expression.data_[, 2:dim(expression.data_)[2]])
rownames(expression.data_) = expression.data_$CellType
expression.data_ = expression.data_[, 2:ncol(expression.data_)]
print(start_index)
if (start_index == 1){
expression.data = expression.data_
}else{
expression.data = cbind(expression.data, expression.data_)
}
start_index = start_index + 1000
}
# saving the expression matrix
write.csv(expression.data, file.path(output_folder, "expression.csv"))
# run python script to identify outliers
command = sprintf("%s hdbscan_outliers.py %s", python.addr, output_folder)
system(command, wait = T)
# remove the expression csv file
file.remove(file.path(output_folder, "expression.csv"))
# load gene clustering
gene_clustering = read.csv(file.path(output_folder, "clustering.csv"), row.names = 1)
cluster_labels = sort(as.vector(unique(gene_clustering$Cluster)))
# save genes by cluster to a file
}else{
print("Data needs to be clustered first")
}
View(gene_clustering[gene_clustering$Cluster == 5, ])
no_clusters
no_clusters = 200
# check if LouvainClustering is present
if ("LouvainClustering" %in% colnames(seurat.obj@meta.data)){
print("Identifying gene outliers but first need to aggregate gene expression by clusters")
seurat.obj = SetAllIdent(object=seurat.obj, id="LouvainClustering")
no.genes = nrow(seurat.obj@data)
start_index = 1
while (start_index < no.genes){
end_index = start_index + 999
end_index = min(end_index, no.genes)
expression.data_ = data.matrix(seurat.obj@data[start_index:end_index, ])
expression.data_ = t(expression.data_)
expression.data_ = as.data.frame(expression.data_)
expression.data_ = cbind(data.frame(CellLabels = as.vector(seurat.obj@ident)), expression.data_)
expression.data_ = aggregate(expression.data_[2:dim(expression.data_)[2]], list(expression.data_$CellLabels), mean)
expression.data_ = cbind(data.frame(CellType = expression.data_$Group.1), expression.data_[, 2:dim(expression.data_)[2]])
rownames(expression.data_) = expression.data_$CellType
expression.data_ = expression.data_[, 2:ncol(expression.data_)]
print(start_index)
if (start_index == 1){
expression.data = expression.data_
}else{
expression.data = cbind(expression.data, expression.data_)
}
start_index = start_index + 1000
}
# saving the expression matrix
write.csv(expression.data, file.path(output_folder, "expression.csv"))
# run python script to identify outliers
command = sprintf("%s hdbscan_outliers.py %s", python.addr, output_folder)
system(command, wait = T)
# remove the expression csv file
file.remove(file.path(output_folder, "expression.csv"))
# load gene clustering
gene_clustering = read.csv(file.path(output_folder, "clustering.csv"), row.names = 1)
cluster_labels = sort(as.vector(unique(gene_clustering$Cluster)))
# save genes by cluster to a file
}else{
print("Data needs to be clustered first")
}
command = sprintf("%s clustering.py %s", python.addr, output_folder)
system(command, wait = T)
# check if LouvainClustering is present
if ("LouvainClustering" %in% colnames(seurat.obj@meta.data)){
print("Identifying gene outliers but first need to aggregate gene expression by clusters")
seurat.obj = SetAllIdent(object=seurat.obj, id="LouvainClustering")
no.genes = nrow(seurat.obj@data)
start_index = 1
while (start_index < no.genes){
end_index = start_index + 999
end_index = min(end_index, no.genes)
expression.data_ = data.matrix(seurat.obj@data[start_index:end_index, ])
expression.data_ = t(expression.data_)
expression.data_ = as.data.frame(expression.data_)
expression.data_ = cbind(data.frame(CellLabels = as.vector(seurat.obj@ident)), expression.data_)
expression.data_ = aggregate(expression.data_[2:dim(expression.data_)[2]], list(expression.data_$CellLabels), mean)
expression.data_ = cbind(data.frame(CellType = expression.data_$Group.1), expression.data_[, 2:dim(expression.data_)[2]])
rownames(expression.data_) = expression.data_$CellType
expression.data_ = expression.data_[, 2:ncol(expression.data_)]
print(start_index)
if (start_index == 1){
expression.data = expression.data_
}else{
expression.data = cbind(expression.data, expression.data_)
}
start_index = start_index + 1000
}
# saving the expression matrix
write.csv(expression.data, file.path(output_folder, "expression.csv"))
# run python script to identify outliers
command = sprintf("%s clustering.py %s", python.addr, output_folder)
system(command, wait = T)
# remove the expression csv file
file.remove(file.path(output_folder, "expression.csv"))
# load gene clustering
gene_clustering = read.csv(file.path(output_folder, "clustering.csv"), row.names = 1)
# save genes by cluster to a file
}else{
print("Data needs to be clustered first")
}
# check if LouvainClustering is present
if ("LouvainClustering" %in% colnames(seurat.obj@meta.data)){
print("Identifying gene outliers but first need to aggregate gene expression by clusters")
seurat.obj = SetAllIdent(object=seurat.obj, id="LouvainClustering")
no.genes = nrow(seurat.obj@data)
start_index = 1
while (start_index < no.genes){
end_index = start_index + 999
end_index = min(end_index, no.genes)
expression.data_ = data.matrix(seurat.obj@data[start_index:end_index, ])
expression.data_ = t(expression.data_)
expression.data_ = as.data.frame(expression.data_)
expression.data_ = cbind(data.frame(CellLabels = as.vector(seurat.obj@ident)), expression.data_)
expression.data_ = aggregate(expression.data_[2:dim(expression.data_)[2]], list(expression.data_$CellLabels), mean)
expression.data_ = cbind(data.frame(CellType = expression.data_$Group.1), expression.data_[, 2:dim(expression.data_)[2]])
rownames(expression.data_) = expression.data_$CellType
expression.data_ = expression.data_[, 2:ncol(expression.data_)]
print(start_index)
if (start_index == 1){
expression.data = expression.data_
}else{
expression.data = cbind(expression.data, expression.data_)
}
start_index = start_index + 1000
}
# saving the expression matrix
write.csv(expression.data, file.path(output_folder, "expression.csv"))
# run python script to identify outliers
command = sprintf("%s clustering.py %s", python.addr, output_folder, no_clusters)
system(command, wait = T)
# remove the expression csv file
file.remove(file.path(output_folder, "expression.csv"))
# load gene clustering
gene_clustering = read.csv(file.path(output_folder, "clustering.csv"), row.names = 1)
# save genes by cluster to a file
}else{
print("Data needs to be clustered first")
}
# check if LouvainClustering is present
if ("LouvainClustering" %in% colnames(seurat.obj@meta.data)){
print("Identifying gene outliers but first need to aggregate gene expression by clusters")
seurat.obj = SetAllIdent(object=seurat.obj, id="LouvainClustering")
no.genes = nrow(seurat.obj@data)
start_index = 1
while (start_index < no.genes){
end_index = start_index + 999
end_index = min(end_index, no.genes)
expression.data_ = data.matrix(seurat.obj@data[start_index:end_index, ])
expression.data_ = t(expression.data_)
expression.data_ = as.data.frame(expression.data_)
expression.data_ = cbind(data.frame(CellLabels = as.vector(seurat.obj@ident)), expression.data_)
expression.data_ = aggregate(expression.data_[2:dim(expression.data_)[2]], list(expression.data_$CellLabels), mean)
expression.data_ = cbind(data.frame(CellType = expression.data_$Group.1), expression.data_[, 2:dim(expression.data_)[2]])
rownames(expression.data_) = expression.data_$CellType
expression.data_ = expression.data_[, 2:ncol(expression.data_)]
print(start_index)
if (start_index == 1){
expression.data = expression.data_
}else{
expression.data = cbind(expression.data, expression.data_)
}
start_index = start_index + 1000
}
# saving the expression matrix
write.csv(expression.data, file.path(output_folder, "expression.csv"))
# run python script to identify outliers
command = sprintf("%s clustering.py %s %s", python.addr, output_folder, no_clusters)
system(command, wait = T)
# remove the expression csv file
file.remove(file.path(output_folder, "expression.csv"))
# load gene clustering
gene_clustering = read.csv(file.path(output_folder, "clustering.csv"), row.names = 1)
# save genes by cluster to a file
}else{
print("Data needs to be clustered first")
}
no_clusters
command
write.csv(expression.data, file.path(output_folder, "expression.csv"))
# run python script to identify outliers
command = sprintf("%s clustering.py %s %s", python.addr, output_folder, no_clusters)
system(command, wait = T)
write.csv(expression.data, file.path(output_folder, "expression.csv"))
command = sprintf("%s clustering.py %s %s", python.addr, output_folder, no_clusters)
system(command, wait = T)
# remove the expression csv file
file.remove(file.path(output_folder, "expression.csv"))
# load gene clustering
gene_clustering = read.csv(file.path(output_folder, "clustering.csv"), row.names = 1)
View(gene_clustering[gene_clustering$Cluster == 0])
View(gene_clustering[gene_clustering$Cluster == 0, ])
View(gene_clustering[gene_clustering$Cluster == 1, ])
View(gene_clustering[gene_clustering$Cluster == 2, ])
View(gene_clustering[gene_clustering$Cluster == 3, ])
no_clusters
no_clusters = 50
gene_clustering = read.csv(file.path(output_folder, "clustering.csv"), row.names = 1)
View(gene_clustering[gene_clustering$Cluster == 0, ])
View(gene_clustering[gene_clustering$Cluster == 1, ])
View(gene_clustering[gene_clustering$Cluster == 2, ])
View(gene_clustering[gene_clustering$Cluster == 3, ])
View(gene_clustering[gene_clustering$Cluster == 4, ])
View(gene_clustering[gene_clustering$Cluster == 5, ])
View(gene_clustering[gene_clustering$Cluster == 7, ])
as.vector(unique(gene_clustering$GeneNames))
gene_names = as.vector(unique(gene_clustering$GeneNames))
seq_along(gene_names)
dir.create(file.path(output_folder, "features"))
features_folder = output_folder, "features"
features_folder = file.path(output_folder, "features")
features_folder
dir.create(features_folder)
gene_names = as.vector(unique(gene_clustering$GeneNames))
features_folder = file.path(output_folder, "features")
dir.create(features_folder)
for (i in seq_along(gene_names)){
gene_name = gene_names[i]
png_name = paste(file.path(features_folder, gene_name), "png", sep = ".")
}
png_name
FeaturePlot(object=seurat.obj, features.plot=c(gene_name), cols.use=c("blue", "red"), pt.size=1, no.axes=T, dark.theme=T)
dev.off()
for (i in seq_along(gene_names)){
gene_name = gene_names[i]
png_name = paste(file.path(features_folder, gene_name), "png", sep = ".")
png(png_name, width = 500, height = 500)
FeaturePlot(object=seurat.obj, features.plot=c(gene_name), cols.use=c("blue", "red"), pt.size=1, no.axes=T, dark.theme=T)
dev.off()
}
dr_coordinates = seurat.obj@dr$umap@cell.embeddings
class(dr_coordinates)
dim(dr_coordinates)
colnames(dr_coordinates)
View(expression.data)
gene_expression = seurat.obj@data[gene_name, ]
gene_expression
dframe = data.frame(X = dr_coordinates[, 1], Y = dr_coordinates[, 2], Expression = seurat.obj@data[gene_name, ])
colnames(dframe)
View(dframe)
plot.obj = ggplot(dframe, aes(x = X, y = Y, color = Expression))
plot.obj = plot.obj + geom_point()
plot.obj
dev.off()
dev.off()
plot.obj
plot.obj = ggplot(dframe, aes(x = X, y = Y, color = Expression))
plot.obj = plot.obj + geom_point(aes(size = 1))
plot.obj
plot.obj = ggplot(dframe, aes(x = X, y = Y, color = Expression))
plot.obj = plot.obj + geom_point(size = .5)
plot.obj
plot.obj = ggplot(dframe, aes(x = X, y = Y, color = Expression))
plot.obj = plot.obj + geom_point(size = .5)
plot.obj = plot.obj + theme(axis.line=element_blank(), axis.text.x=element_blank(),
axis.text.y=element_blank(), axis.ticks=element_blank())
plot.obj
plot.obj = ggplot(dframe, aes(x = X, y = Y, color = Expression))
plot.obj = plot.obj + geom_point(size = .5)
plot.obj = plot.obj + theme(axis.line=element_blank(), axis.text.x=element_blank(),
axis.text.y=element_blank(), axis.ticks=element_blank())
plot.obj
dev.off()
dev.off()
plot.obj = ggplot(dframe, aes(x = X, y = Y, color = Expression))
plot.obj = plot.obj + geom_point(size = .5)
plot.obj = plot.obj + theme(axis.line=element_blank(), axis.text.x=element_blank(),
axis.text.y=element_blank(), axis.ticks=element_blank())
plot.obj
plot.obj = ggplot(dframe, aes(x = X, y = Y, color = Expression))
plot.obj = plot.obj + geom_point(size = .5)
plot.obj = plot.obj + theme_void()
plot.obj
plot.obj = ggplot(dframe, aes(x = X, y = Y, color = Expression))
plot.obj = plot.obj + geom_point(size = .5)
plot.obj = plot.obj + theme_void() + theme_dark()
plot.obj
plot.obj = ggplot(dframe, aes(x = X, y = Y, color = Expression))
plot.obj = plot.obj + geom_point(size = .5)
plot.obj = plot.obj + theme_void() + theme(panel.background = element_rect(fill = 'green', colour = 'red'))
plot.obj
plot.obj = ggplot(dframe, aes(x = X, y = Y, color = Expression))
plot.obj = plot.obj + geom_point(size = .5)
plot.obj = plot.obj + theme_void() + theme(panel.background = element_rect(fill = 'black', colour = 'black'))
plot.obj
scale_colour_gradient2
plot.obj = ggplot(dframe, aes(x = X, y = Y, color = Expression))
plot.obj = plot.obj + geom_point(size = .5)
plot.obj = plot.obj + theme_void() + theme(panel.background = element_rect(fill = 'black', colour = 'black'))
plot.obj = plot.obj + scale_colour_gradient2(low = "blue", mid = 'green', high = "red")
plot.obj
plot.obj = ggplot(dframe, aes(x = X, y = Y, color = Expression))
plot.obj = plot.obj + geom_point(size = .5)
plot.obj = plot.obj + theme_void() + theme(panel.background = element_rect(fill = 'black', colour = 'black'))
plot.obj = plot.obj + scale_colour_gradient(low = "blue", high = "red")
plot.obj
gene_names = as.vector(unique(gene_clustering$GeneNames))
features_folder = file.path(output_folder, "features")
dir.create(features_folder)
dr_coordinates = seurat.obj@dr$umap@cell.embeddings
for (i in seq_along(gene_names)){
gene_name = gene_names[i]
png_name = paste(file.path(features_folder, gene_name), "png", sep = ".")
dframe = data.frame(X = dr_coordinates[, 1], Y = dr_coordinates[, 2], Expression = seurat.obj@data[gene_name, ])
plot.obj = ggplot(dframe, aes(x = X, y = Y, color = Expression))
plot.obj = plot.obj + geom_point(size = .5)
plot.obj = plot.obj + theme_void() + theme(panel.background = element_rect(fill = 'black', colour = 'black'))
plot.obj = plot.obj + scale_colour_gradient(low = "blue", high = "red")
png(png_name, width = 500, height = 500)
print(plot.obj)
dev.off()
}
i % 10
i %% 10
print(sprintf("%s / %s", i, length(gene_names)))
gene_names = as.vector(unique(gene_clustering$GeneNames))
features_folder = file.path(output_folder, "features")
dir.create(features_folder)
dr_coordinates = seurat.obj@dr$umap@cell.embeddings
for (i in seq_along(gene_names)){
gene_name = gene_names[i]
png_name = paste(file.path(features_folder, gene_name), "png", sep = ".")
dframe = data.frame(X = dr_coordinates[, 1], Y = dr_coordinates[, 2], Expression = seurat.obj@data[gene_name, ])
plot.obj = ggplot(dframe, aes(x = X, y = Y, color = Expression))
plot.obj = plot.obj + geom_point(size = .5)
plot.obj = plot.obj + theme_void() + theme(panel.background = element_rect(fill = 'black', colour = 'black'))
plot.obj = plot.obj + scale_colour_gradient(low = "blue", high = "red")
png(png_name, width = 500, height = 500)
print(plot.obj)
dev.off()
if (i %% 10 == 0){
print(sprintf("%s / %s", i, length(gene_names)))
}
}
md = readRDS("../../output/adult_spleen/adult_spleen_meta_data.RDS")
dr_df = readRDS("../../output/adult_spleen/adult_spleen_dr.RDS")
dim(md)
View(md)
as.vector(unique(md$donor_time))
as.vector(unique(md$orig.ident))
class(dr_df)
i
for (i in 16692:length(gene_names)){
gene_name = gene_names[i]
png_name = paste(file.path(features_folder, gene_name), "png", sep = ".")
dframe = data.frame(X = dr_coordinates[, 1], Y = dr_coordinates[, 2], Expression = seurat.obj@data[gene_name, ])
plot.obj = ggplot(dframe, aes(x = X, y = Y, color = Expression))
plot.obj = plot.obj + geom_point(size = .5)
plot.obj = plot.obj + theme_void() + theme(panel.background = element_rect(fill = 'black', colour = 'black'))
plot.obj = plot.obj + scale_colour_gradient(low = "blue", high = "red")
png(png_name, width = 500, height = 500)
print(plot.obj)
dev.off()
if (i %% 10 == 0){
print(sprintf("%s / %s", i, length(gene_names)))
}
}
lak = readRDS("~/Downloads/spleen_QC_PCA_donor.regerssed_alldonors_bbknn_UMAP_meta_ident.rds")
class(lak)
View(lak)
unique(as.vector(lak$ident))
lak = read.csv("./here/hgnc.csv")
lak = read.csv("./here/hgnc.csv", row.names = F)
hgnc = read.csv("./here/hgnc.csv", sep = '\t', row.names =NULL)
View(hgnc)
length(as.vector(hgnc$symbol))
length(unique(as.vector(hgnc$symbol)))
colnames(hgnc)
rm(hgnc)
gene_info = read.csv("./here/gene_info.csv")
dim(gene_info)
View(gene_info)
colnames(gene_info)
to.keep = c("gene.symbol", "gene.name", "gene.family", "reactome.pathway", "gene.summary")
View(gene_info[, to.keep])
gene_info = gene_info[, to.keep]
lak = gene_info
lak[lak == ""] = "None"
gene_symbol = as.vector(gene_info$gene.symbol)
gene_name = as.vector(gene_info$gene.name)
gene_family = as.vector(gene_info$gene.family)
reactom_pathway = as.vector(gene_info$reactom.pathway)
gene_summary = as.vector(gene_info$gene.summary)
gene_family[gene_family] == '' = "None"
gene_family[gene_family == ''] = "None"
reactom_pathway[reactom_pathway == ''] = 'None'
gene_info = data.frame(GeneSymbol = gene_symbol, GeneName = gene_name, GeneFamily = gene_family, ReactomPathway = reactom_pathway, GeneSummary = gene_summary)
length(gene_symbol)
length(gene_name)
length(gene_family)
length(reactom_pathway)
reactom_pathway = as.vector(gene_info$reactom.pathway)
length(reactom_pathway)
reactom_pathway = as.vector(gene_info$reactome.pathway)
length(reactom_pathway)
reactom_pathway[reactom_pathway == ''] = "None"
gene_info = data.frame(GeneSymbol = gene_symbol, GeneName = gene_name, GeneFamily = gene_family, ReactomPathway = reactom_pathway, GeneSummary = gene_summary)
View(gene_info)
write.csv("gene_info.csv", gene_info)
write.csv(gene_info, "gene_info.csv")
object.size(gene_info) / 1000000
write.csv(gene_info, "gene_info.csv", row.names = F)
write.csv(gene_info, "here/gene_info.csv", row.names = F)
colnames(gene_info)
17000 - 5000
lak = read.csv("../../output/liver_paper/make_cell_annotation_template_liver_all.RDS_181115121053/update_template_fine_labels.csv", stringsAsFactors = F, sep = "\t")
View(lak)
lak = read.csv("../../output/liver_paper/make_cell_annotation_template_liver_all.RDS_181115121053/update_template_original_labels.csv", stringsAsFactors = F, sep = "\t")
View(lak)
lak = read.csv("../../output/liver_paper/make_cell_annotation_template_liver_all.RDS_181115121053/update_template_fine_labels.csv", stringsAsFactors = F, sep = ",")
View(lak)
